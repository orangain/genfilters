name: CI

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Verify formatting
        run: deno fmt --check

      - name: Run linter
        run: deno lint

  test:
    name: Test on ${{ matrix.os }} / Deno ${{ matrix.deno-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        deno-version: [v1.x, v2.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ matrix.deno-version }}-${{ hashFiles('deps.ts') }}
          restore-keys: |
            ${{ runner.os }}-deno-${{ matrix.deno-version }}-
            ${{ runner.os }}-deno-

      - name: Run tests
        run: deno test --allow-read --allow-write --allow-run

  # release:
  #   name: Create Release
  #   needs: test
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Deno
  #       uses: denoland/setup-deno@v2
  #       with:
  #         deno-version: v2.x

  #     - name: Build executable
  #       run: |
  #         deno compile --allow-read --allow-write --allow-run --output genfilters mod.ts
  #         zip -r genfilters-linux.zip genfilters

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false

  #     - name: Upload Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./genfilters-linux.zip
  #         asset_name: genfilters-linux.zip
  #         asset_content_type: application/zip
